name: Docker UI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:

  build-and-push-image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    # If we had concurrent builds, the deployment stage could fail because the current task definition might not match the expected one on ECR.
    # By scoping the UI builds in a single group, each build would depend on the finality of the previous one in the group.
    # The likelihood of a conflicting task definition is then reduced (as they are created once the image finishes building)
    concurrency:
      group: ui
      cancel-in-progress: false
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/github-actions-gnosispay-v2-ui-prod
          aws-region: eu-central-1

      - name: Login to AWS Container Registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Configure and check image name
        id: docker_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ui
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set +e
          image_name="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecr describe-images --repository-name=$ECR_REPOSITORY --image-ids=imageTag=$IMAGE_TAG
          if [[ $? == "0" ]]; then image_exists=true; else image_exists=false; fi
          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          echo "image_exists=$image_exists" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to AWS Container Registry
        env:
          IMAGE_NAME: ${{ steps.docker_image.outputs.image_name }}
          VITE_PSE_RELAY_SERVER_URL: ${{ secrets.VITE_PSE_RELAY_SERVER_URL }}
          VITE_IFRAME_HOST: ${{ secrets.VITE_IFRAME_HOST }}
          VITE_GNOSIS_PAY_API_BASE_URL: ${{ secrets.VITE_GNOSIS_PAY_API_BASE_URL }}
          VITE_PSE_APP_ID: ${{ secrets.VITE_PSE_APP_ID }}
        if: steps.docker_image.outputs.image_exists == 'false'
        run: |
          docker buildx build \
            --build-arg VITE_PSE_RELAY_SERVER_URL=$VITE_PSE_RELAY_SERVER_URL \
            --build-arg VITE_IFRAME_HOST=$VITE_IFRAME_HOST \
            --build-arg VITE_GNOSIS_PAY_API_BASE_URL=$VITE_GNOSIS_PAY_API_BASE_URL \
            --build-arg VITE_PSE_APP_ID=$VITE_PSE_APP_ID \
            -t $IMAGE_NAME . -f ./Dockerfile.ui --push

  # deploy-on-staging:
  #   name: Deploy on Staging
  #   if: github.ref == 'refs/heads/main'
  #   uses: ./.github/workflows/deploy.yml
  #   needs: build-and-push-image
  #   with:
  #     environment: stg
  #     image_tag: ${{ github.sha }}
  #   secrets: inherit
