// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetApiV1AccountBalancesData, GetApiV1AccountBalancesResponses, GetApiV1AccountBalancesErrors, PostApiV1AccountData, PostApiV1AccountResponses, PostApiV1AccountErrors, GetApiV1AccountSignaturePayloadData, GetApiV1AccountSignaturePayloadResponses, GetApiV1AccountSignaturePayloadErrors, PatchApiV1AccountDeploySafeModulesData, PatchApiV1AccountDeploySafeModulesResponses, PatchApiV1AccountDeploySafeModulesErrors, GetApiV1AuthNonceData, GetApiV1AuthNonceResponses, GetApiV1AuthNonceErrors, PostApiV1AuthChallengeData, PostApiV1AuthChallengeResponses, PostApiV1AuthChallengeErrors, PostApiV1AuthSignupData, PostApiV1AuthSignupResponses, PostApiV1AuthSignupErrors, PostApiV1AuthSignupOtpData, PostApiV1AuthSignupOtpResponses, PostApiV1AuthSignupOtpErrors, PostApiV1CardsByCardIdActivateData, PostApiV1CardsByCardIdActivateResponses, PostApiV1CardsByCardIdActivateErrors, PostApiV1CardsByCardIdFreezeData, PostApiV1CardsByCardIdFreezeResponses, PostApiV1CardsByCardIdFreezeErrors, PostApiV1CardsByCardIdLostData, PostApiV1CardsByCardIdLostResponses, PostApiV1CardsByCardIdLostErrors, GetApiV1CardsByCardIdStatusData, GetApiV1CardsByCardIdStatusResponses, GetApiV1CardsByCardIdStatusErrors, PostApiV1CardsByCardIdStolenData, PostApiV1CardsByCardIdStolenResponses, PostApiV1CardsByCardIdStolenErrors, PostApiV1CardsByCardIdUnfreezeData, PostApiV1CardsByCardIdUnfreezeResponses, PostApiV1CardsByCardIdUnfreezeErrors, PostApiV1CardsByCardIdVoidData, PostApiV1CardsByCardIdVoidResponses, PostApiV1CardsByCardIdVoidErrors, GetApiV1CardsData, GetApiV1CardsResponses, GetApiV1CardsErrors, PostApiV1CardsVirtualData, PostApiV1CardsVirtualResponses, PostApiV1CardsVirtualErrors, GetApiV1CardsTransactionsData, GetApiV1CardsTransactionsResponses, GetApiV1CardsTransactionsErrors, GetApiV1DelayRelayData, GetApiV1DelayRelayResponses, GetApiV1DelayRelayErrors, GetApiV1OrderData, GetApiV1OrderResponses, GetApiV1OrderErrors, GetApiV1SafeConfigData, GetApiV1SafeConfigResponses, GetApiV1SafeConfigErrors, PostApiV1SafeSetCurrencyData, PostApiV1SafeSetCurrencyResponses, PostApiV1SafeSetCurrencyErrors, GetApiV1SourceOfFundsData, GetApiV1SourceOfFundsResponses, GetApiV1SourceOfFundsErrors, PostApiV1SourceOfFundsData, PostApiV1SourceOfFundsResponses, PostApiV1SourceOfFundsErrors, GetApiV1TransactionsData, GetApiV1TransactionsResponses, GetApiV1TransactionsErrors, PostApiV1VerificationCheckData, PostApiV1VerificationCheckResponses, PostApiV1VerificationCheckErrors, PostApiV1VerificationData, PostApiV1VerificationResponses, PostApiV1VerificationErrors, GetApiV1AccountsOnchainDailyLimitData, GetApiV1AccountsOnchainDailyLimitResponses, GetApiV1AccountsOnchainDailyLimitErrors, PutApiV1AccountsOnchainDailyLimitData, PutApiV1AccountsOnchainDailyLimitResponses, PutApiV1AccountsOnchainDailyLimitErrors, GetApiV1AccountsOnchainDailyLimitTransactionDataData, GetApiV1AccountsOnchainDailyLimitTransactionDataResponses, GetApiV1AccountsOnchainDailyLimitTransactionDataErrors, PostApiV1AccountsWithdrawData, PostApiV1AccountsWithdrawResponses, PostApiV1AccountsWithdrawErrors, GetApiV1AccountsWithdrawTransactionDataData, GetApiV1AccountsWithdrawTransactionDataResponses, GetApiV1AccountsWithdrawTransactionDataErrors, GetApiV1EoaAccountsData, GetApiV1EoaAccountsResponses, GetApiV1EoaAccountsErrors, PostApiV1EoaAccountsData, PostApiV1EoaAccountsResponses, PostApiV1EoaAccountsErrors, DeleteApiV1EoaAccountsByIdData, DeleteApiV1EoaAccountsByIdResponses, DeleteApiV1EoaAccountsByIdErrors, GetApiV1IbansAvailableData, GetApiV1IbansAvailableResponses, GetApiV1IbansAvailableErrors, GetApiV1IbansDetailsData, GetApiV1IbansDetailsResponses, GetApiV1IbansDetailsErrors, PostApiV1IbansMoneriumProfileData, PostApiV1IbansMoneriumProfileResponses, PostApiV1IbansMoneriumProfileErrors, GetApiV1IbansOauthRedirectUrlData, GetApiV1IbansOauthRedirectUrlResponses, GetApiV1IbansOauthRedirectUrlErrors, DeleteApiV1IbansResetData, DeleteApiV1IbansResetResponses, DeleteApiV1IbansResetErrors, GetApiV1IbansOrdersData, GetApiV1IbansOrdersResponses, GetApiV1IbansOrdersErrors, GetApiV1IbansSigningMessageData, GetApiV1IbansSigningMessageResponses, GetApiV1IbansSigningMessageErrors, GetApiV1KycIntegrationData, GetApiV1KycIntegrationResponses, GetApiV1KycIntegrationErrors, GetApiV1KycIntegrationSdkData, GetApiV1KycIntegrationSdkResponses, GetApiV1KycIntegrationSdkErrors, PostApiV1KycImportPartnerApplicantData, PostApiV1KycImportPartnerApplicantResponses, PostApiV1KycImportPartnerApplicantErrors, PostApiV1OrderByOrderIdCreateCardData, PostApiV1OrderByOrderIdCreateCardResponses, PostApiV1OrderByOrderIdCreateCardErrors, PutApiV1OrderByOrderIdAttachTransactionData, PutApiV1OrderByOrderIdAttachTransactionResponses, PutApiV1OrderByOrderIdAttachTransactionErrors, PostApiV1OrderByOrderIdAttachCouponData, PostApiV1OrderByOrderIdAttachCouponResponses, PostApiV1OrderByOrderIdAttachCouponErrors, GetApiV1OrderByOrderIdData, GetApiV1OrderByOrderIdResponses, GetApiV1OrderByOrderIdErrors, PutApiV1OrderByOrderIdConfirmPaymentData, PutApiV1OrderByOrderIdConfirmPaymentResponses, PutApiV1OrderByOrderIdConfirmPaymentErrors, PostApiV1OrderByOrderIdCancelData, PostApiV1OrderByOrderIdCancelResponses, PostApiV1OrderByOrderIdCancelErrors, PostApiV1OrderCreateData, PostApiV1OrderCreateResponses, PostApiV1OrderCreateErrors, DeleteApiV1OwnersData, DeleteApiV1OwnersResponses, DeleteApiV1OwnersErrors, GetApiV1OwnersData, GetApiV1OwnersResponses, GetApiV1OwnersErrors, PostApiV1OwnersData, PostApiV1OwnersResponses, PostApiV1OwnersErrors, GetApiV1OwnersAddTransactionDataData, GetApiV1OwnersAddTransactionDataResponses, GetApiV1OwnersAddTransactionDataErrors, GetApiV1OwnersRemoveTransactionDataData, GetApiV1OwnersRemoveTransactionDataResponses, GetApiV1OwnersRemoveTransactionDataErrors, GetApiV1RewardsData, GetApiV1RewardsResponses, GetApiV1RewardsErrors, PostApiV1UserReferrerCodeData, PostApiV1UserReferrerCodeResponses, PostApiV1UserReferrerCodeErrors, GetApiV1UserReferralsData, GetApiV1UserReferralsResponses, GetApiV1UserReferralsErrors, GetApiV1UserTermsData, GetApiV1UserTermsResponses, GetApiV1UserTermsErrors, PostApiV1UserTermsData, PostApiV1UserTermsResponses, PostApiV1UserTermsErrors, GetApiV1UserData, GetApiV1UserResponses, GetApiV1UserErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieve the account balance for a user
 * Retrieves the balance information for a given user (total balance, spendable balance and pending balance)
 */
export const getApiV1AccountBalances = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AccountBalancesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1AccountBalancesResponses, GetApiV1AccountBalancesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/account-balances',
        ...options
    });
};

/**
 * Create or deploy a Safe account for the authenticated user
 * This endpoint serves two purposes - it first checks if a Safe account exists for the user. If no account exists, it creates one and initiates deployment.
 * If an account already exists but is not deployed, it initiates the deployment process.
 *
 * This endpoint can be called immediately after user signup as there are no restrictions or prerequisites.
 *
 * When deploying a new Safe, the endpoint waits for transaction execution and confirmation on-chain.
 * Because of this, the request may take up to 10 seconds to complete when a deployment is needed.
 *
 * The deployment process is handled by a sponsored transaction on the Gnosis Chain, and the response
 * includes the transaction hash for tracking the deployment status.
 *
 * Next steps after successful deployment:
 * - Once this endpoint successfully creates and deploys a Safe account, the user should call
 * the `/api/v1/safe/set-currency` endpoint to set the currency for the account.
 * - Note that the `/api/v1/safe/set-currency` endpoint requires the user to have completed
 * the KYC process successfully.
 *
 */
export const postApiV1Account = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1AccountResponses, PostApiV1AccountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/account',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get signature data for account setup
 * Returns the domain, types, and message objects needed for EIP-712 typed data signing.
 * This is typically used to prepare the data that needs to be signed by the user's wallet
 * to set up account allowances and delays.
 *
 * The response contains structured data compatible with the EIP-712 signature standard.
 * After obtaining this data and signing it with the user's wallet, the signature can be
 * sent to the `/api/v1/account/deploy-safe-modules` endpoint to complete the setup process.
 *
 * Prerequisites:
 * - User must have a deployed Safe account
 * - The Safe account must have a currency set (via `/api/v1/safe/set-currency`)
 *
 */
export const getApiV1AccountSignaturePayload = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AccountSignaturePayloadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1AccountSignaturePayloadResponses, GetApiV1AccountSignaturePayloadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/account/signature-payload',
        ...options
    });
};

/**
 * Deploy Safe modules with a user signature
 * Takes an EIP-712 signature provided by the user's wallet and executes the account setup transaction.
 * This is the second step in the account setup process, after obtaining the signature data
 * from the GET /api/v1/account/signature-payload endpoint.
 *
 * The process flow is:
 * 1. Call GET /api/v1/account/signature-payload to get the EIP-712 signature data
 * 2. Sign the data with the user's wallet
 * 3. Submit the signature to this endpoint to execute the transaction
 *
 * This endpoint will wait for the transaction to be confirmed on-chain and return the
 * transaction hash when successful. Because it waits for on-chain confirmation, this request
 * may take up to 10 seconds to complete.
 *
 * The setup process configures Safe account allowances and delay mechanisms required for secure operation.
 *
 * Prerequisites:
 * - User must have a deployed Safe account
 * - The Safe account must have a currency set (via /api/v1/safe/set-currency)
 * - User must have signed the data from GET /api/v1/account/signature-payload
 *
 */
export const patchApiV1AccountDeploySafeModules = <ThrowOnError extends boolean = false>(options: Options<PatchApiV1AccountDeploySafeModulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiV1AccountDeploySafeModulesResponses, PatchApiV1AccountDeploySafeModulesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/account/deploy-safe-modules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate nonce
 */
export const getApiV1AuthNonce = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AuthNonceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1AuthNonceResponses, GetApiV1AuthNonceErrors, ThrowOnError>({
        url: '/api/v1/auth/nonce',
        ...options
    });
};

/**
 * Verify SIWE signature
 */
export const postApiV1AuthChallenge = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AuthChallengeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1AuthChallengeResponses, PostApiV1AuthChallengeErrors, ThrowOnError>({
        url: '/api/v1/auth/challenge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new User
 * This endpoint creates a new `User` associating it with the provided email address. During transition period, OTP verification is optional.
 */
export const postApiV1AuthSignup = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AuthSignupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1AuthSignupResponses, PostApiV1AuthSignupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request OTP for email verification
 * This endpoint generates and sends a one-time password (OTP) to the provided email address for verification purposes.
 */
export const postApiV1AuthSignupOtp = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AuthSignupOtpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1AuthSignupOtpResponses, PostApiV1AuthSignupOtpErrors, ThrowOnError>({
        url: '/api/v1/auth/signup/otp',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate a Card
 * ## Prerequisites
 * - Card must have not been activated
 * - A Safe Account should be set for the authenticated user
 *
 * If those conditions are met, the card is then activated.
 * The activated time will be the moment that this endpoint was triggered, in UTC.
 *
 * :::info
 * This action also notifies the user by email
 * :::
 *
 * :::caution
 * Be sure to have a Safe Account associated with the user. If a Safe Account is not tied to the user the endpoint will fail.
 *
 * To check if a user has a Safe Account, you can get the User details via `GET /api/v1/user` and check if there's at least one `safeWallets` tied to the user.
 *
 * A Safe Account can be created via `POST /api/v1/account`
 * :::
 *
 */
export const postApiV1CardsByCardIdActivate = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CardsByCardIdActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1CardsByCardIdActivateResponses, PostApiV1CardsByCardIdActivateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/{cardId}/activate',
        ...options
    });
};

/**
 * Freeze a Card
 * This will prevent the card from being used for any transactions.
 *
 * :::info
 * The card can be frozen and unfrozen instantly and multiple times.
 * :::
 *
 */
export const postApiV1CardsByCardIdFreeze = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CardsByCardIdFreezeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1CardsByCardIdFreezeResponses, PostApiV1CardsByCardIdFreezeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/{cardId}/freeze',
        ...options
    });
};

/**
 * Report a Card as lost
 */
export const postApiV1CardsByCardIdLost = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CardsByCardIdLostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1CardsByCardIdLostResponses, PostApiV1CardsByCardIdLostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/{cardId}/lost',
        ...options
    });
};

/**
 * Get a Card status
 */
export const getApiV1CardsByCardIdStatus = <ThrowOnError extends boolean = false>(options: Options<GetApiV1CardsByCardIdStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1CardsByCardIdStatusResponses, GetApiV1CardsByCardIdStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/{cardId}/status',
        ...options
    });
};

/**
 * Report a Card as stolen
 */
export const postApiV1CardsByCardIdStolen = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CardsByCardIdStolenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1CardsByCardIdStolenResponses, PostApiV1CardsByCardIdStolenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/{cardId}/stolen',
        ...options
    });
};

/**
 * Revert a Card freeze
 * This will allow the card to be used for transactions. The card needs to be active and in a frozen state.
 *
 * :::info
 * The card can be frozen and unfrozen instantly and multiple times.
 * :::
 *
 */
export const postApiV1CardsByCardIdUnfreeze = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CardsByCardIdUnfreezeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1CardsByCardIdUnfreezeResponses, PostApiV1CardsByCardIdUnfreezeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/{cardId}/unfreeze',
        ...options
    });
};

/**
 * Void a Virtual Card
 * Void a virtual card. Only virtual cards can be voided using this endpoint.
 */
export const postApiV1CardsByCardIdVoid = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CardsByCardIdVoidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1CardsByCardIdVoidResponses, PostApiV1CardsByCardIdVoidErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/{cardId}/void',
        ...options
    });
};

/**
 * List all Cards
 */
export const getApiV1Cards = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1CardsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1CardsResponses, GetApiV1CardsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards',
        ...options
    });
};

/**
 * Create a virtual card
 * Creates a virtual card without requiring a card order. Virtual cards are free and activated immediately.
 * No shipping address or payment validation is required.
 *
 * **Card Limits**: Users can have a maximum of 10 active cards (physical + virtual combined).
 * Active cards exclude voided, lost, and stolen cards.
 *
 */
export const postApiV1CardsVirtual = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1CardsVirtualData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiV1CardsVirtualResponses, PostApiV1CardsVirtualErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/virtual',
        ...options
    });
};

/**
 * Get paginated transactions for activated cards
 * Retrieves paginated transactions for all activated cards of the authenticated user. The final number might differ a little bit, as one thread might contain multiple transactions.
 */
export const getApiV1CardsTransactions = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1CardsTransactionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1CardsTransactionsResponses, GetApiV1CardsTransactionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cards/transactions',
        ...options
    });
};

/**
 * Retrieve the list of delayed transactions for the authenticated user
 * Returns an array of delayed transactions associated with the authenticated user, excluding failed transactions.
 */
export const getApiV1DelayRelay = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1DelayRelayData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1DelayRelayResponses, GetApiV1DelayRelayErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/delay-relay',
        ...options
    });
};

/**
 * Retrieves all card orders
 * Retrieves all card orders for the authenticated user
 */
export const getApiV1Order = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1OrderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1OrderResponses, GetApiV1OrderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/',
        ...options
    });
};

/**
 * Retrieve the Safe configuration for the authenticated user
 * Returns the configuration of the Safe account associated with the authenticated user, including deployment status, approvals, and account status and allowance details from the chain.
 */
export const getApiV1SafeConfig = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1SafeConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1SafeConfigResponses, GetApiV1SafeConfigErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/safe-config',
        ...options
    });
};

/**
 * Set the currency for a user's Safe account based on their country
 * This endpoint sets the appropriate token symbol (currency) for a user's Safe account based on their country.
 * It should be called after deploying a Safe account using the /api/v1/account endpoint.
 *
 * The system assigns currencies based on user's country:
 * - UK users (GB): GBPe
 * - Brazil users (BR): USDCe
 * - Users from other countries: EURe (default)
 *
 * Prerequisite: User must have completed and passed KYC verification.
 *
 */
export const postApiV1SafeSetCurrency = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1SafeSetCurrencyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiV1SafeSetCurrencyResponses, PostApiV1SafeSetCurrencyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/safe/set-currency',
        ...options
    });
};

/**
 * Retrieve the Source of Funds questions.
 */
export const getApiV1SourceOfFunds = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1SourceOfFundsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1SourceOfFundsResponses, GetApiV1SourceOfFundsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/source-of-funds',
        ...options
    });
};

/**
 * Submit answers to the Source of Funds questionnaire.
 */
export const postApiV1SourceOfFunds = <ThrowOnError extends boolean = false>(options: Options<PostApiV1SourceOfFundsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1SourceOfFundsResponses, PostApiV1SourceOfFundsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/source-of-funds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get transactions for activated cards
 * This endpoint is deprecated. Please use [/api/v1/cards/transactions](#/Card%20Management/get_api_v1_cards_transactions) instead. Retrieves transactions for all activated cards of the authenticated user
 *
 * @deprecated
 */
export const getApiV1Transactions = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1TransactionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1TransactionsResponses, GetApiV1TransactionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/transactions',
        ...options
    });
};

/**
 * Validates an OTP Code to verify a Phone Number.
 */
export const postApiV1VerificationCheck = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VerificationCheckData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1VerificationCheckResponses, PostApiV1VerificationCheckErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/verification/check',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request an OTP to verify a Phone Number.
 * This call replaces the existing phone number for a user if it exists, whether it's verified or not.
 */
export const postApiV1Verification = <ThrowOnError extends boolean = false>(options: Options<PostApiV1VerificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1VerificationResponses, PostApiV1VerificationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/verification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get current onchain daily limit
 * Retrieves the current onchain daily spending limit for the authenticated user's Safe account.
 */
export const getApiV1AccountsOnchainDailyLimit = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AccountsOnchainDailyLimitData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1AccountsOnchainDailyLimitResponses, GetApiV1AccountsOnchainDailyLimitErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/accounts/onchain-daily-limit',
        ...options
    });
};

/**
 * Set onchain daily limit
 * Sets a new onchain daily spending limit for the authenticated user's Safe account.
 * This endpoint requires a valid signature from the user's wallet to authorize the change.
 *
 * The signature should be generated by signing the transaction data obtained from
 * the `/api/v1/accounts/onchain-daily-limit/transaction-data` endpoint.
 *
 * The limit update is processed through a delay relay mechanism that executes after 3 minutes.
 *
 * **Note:** The onchainDailyLimit must be an integer value between 1 and 8000.
 *
 */
export const putApiV1AccountsOnchainDailyLimit = <ThrowOnError extends boolean = false>(options: Options<PutApiV1AccountsOnchainDailyLimitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiV1AccountsOnchainDailyLimitResponses, PutApiV1AccountsOnchainDailyLimitErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/accounts/onchain-daily-limit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get transaction data for setting daily limit
 * Returns the transaction data that needs to be signed by the user's wallet to set a new onchain daily limit.
 * This endpoint is used as part of a three-step process:
 * 1. Call this endpoint to get the transaction data
 * 2. Sign the transaction data with the user's wallet
 * 3. Submit the signature to the PUT `/api/v1/accounts/onchain-daily-limit` endpoint
 *
 * **Note:** The onchainDailyLimit must be an integer value between 1 and 8000.
 *
 */
export const getApiV1AccountsOnchainDailyLimitTransactionData = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AccountsOnchainDailyLimitTransactionDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1AccountsOnchainDailyLimitTransactionDataResponses, GetApiV1AccountsOnchainDailyLimitTransactionDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/accounts/onchain-daily-limit/transaction-data',
        ...options
    });
};

/**
 * Withdraw from the user's Safe account
 * Withdraws from the user's Safe account.
 *
 * The signature should be generated by signing the transaction data obtained from
 * the `/api/v1/accounts/withdraw/transaction-data` endpoint.
 *
 * The withdraw is processed through a delay relay mechanism that executes after 3 minutes.
 *
 */
export const postApiV1AccountsWithdraw = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AccountsWithdrawData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1AccountsWithdrawResponses, PostApiV1AccountsWithdrawErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/accounts/withdraw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get typed data for withdrawing from the user's Safe account
 * Returns the EIP-712 typed data that needs to be signed by the user's wallet to withdraw from the user's Safe account.
 * This endpoint is used as part of a three-step process:
 * 1. Call this endpoint to get the EIP-712 typed data
 * 2. Sign the typed data with the user's wallet using EIP-712 signature standard
 * 3. Submit the signature to the POST `/api/v1/accounts/withdraw` endpoint
 *
 */
export const getApiV1AccountsWithdrawTransactionData = <ThrowOnError extends boolean = false>(options: Options<GetApiV1AccountsWithdrawTransactionDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1AccountsWithdrawTransactionDataResponses, GetApiV1AccountsWithdrawTransactionDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/accounts/withdraw/transaction-data',
        ...options
    });
};

/**
 * Retrieve the EOA accounts for the current user
 * Returns a list of externally owned account (EOA) addresses associated with the authenticated user.
 */
export const getApiV1EoaAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1EoaAccountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1EoaAccountsResponses, GetApiV1EoaAccountsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/eoa-accounts',
        ...options
    });
};

/**
 * Create a new EOA account for the current user
 * Registers a new externally owned account (EOA) address for the authenticated user.
 */
export const postApiV1EoaAccounts = <ThrowOnError extends boolean = false>(options: Options<PostApiV1EoaAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1EoaAccountsResponses, PostApiV1EoaAccountsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/eoa-accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an EOA account
 * Removes an externally owned account (EOA) address associated with the authenticated user.
 */
export const deleteApiV1EoaAccountsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1EoaAccountsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiV1EoaAccountsByIdResponses, DeleteApiV1EoaAccountsByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/eoa-accounts/{id}',
        ...options
    });
};

/**
 * Check IBAN Availability
 * Returns whether the user is eligible to enable an IBAN on their account.
 */
export const getApiV1IbansAvailable = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1IbansAvailableData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1IbansAvailableResponses, GetApiV1IbansAvailableErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/ibans/available',
        ...options
    });
};

/**
 * Retrieve IBAN details
 * Returns IBAN details including the IBAN number, BIC, and Status.
 */
export const getApiV1IbansDetails = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1IbansDetailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1IbansDetailsResponses, GetApiV1IbansDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/ibans/details',
        ...options
    });
};

/**
 * Create a new Monerium profile
 * This endpoint attempts to create a new Monerium profile for the authenticated user. If the user already has a Monerium profile, it will return a redirect URL for the OAuth flow to link the existing profile.
 */
export const postApiV1IbansMoneriumProfile = <ThrowOnError extends boolean = false>(options: Options<PostApiV1IbansMoneriumProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1IbansMoneriumProfileResponses, PostApiV1IbansMoneriumProfileErrors, ThrowOnError>({
        url: '/api/v1/ibans/monerium-profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the redirect URL for the Monerium oAuth flow
 * This is the same URL we return on /monerium-profile,
 * in the case something goes wrong you have this endpoint
 * if you need to redirect your users without calling /monerium-profile.
 *
 */
export const getApiV1IbansOauthRedirectUrl = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1IbansOauthRedirectUrlData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1IbansOauthRedirectUrlResponses, GetApiV1IbansOauthRedirectUrlErrors, ThrowOnError>({
        url: '/api/v1/ibans/oauth/redirect_url',
        ...options
    });
};

/**
 * Resets the IBAN integration for this User
 * Remove the IBAN information from our DB and deletes the User's IBAN functionality.
 */
export const deleteApiV1IbansReset = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiV1IbansResetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteApiV1IbansResetResponses, DeleteApiV1IbansResetErrors, ThrowOnError>({
        url: '/api/v1/ibans/reset',
        ...options
    });
};

/**
 * Retrieve a list of Monerium IBAN orders
 * Returns a list of IBAN orders associated with the authenticated user.
 */
export const getApiV1IbansOrders = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1IbansOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1IbansOrdersResponses, GetApiV1IbansOrdersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/ibans/orders',
        ...options
    });
};

/**
 * Get the message that needs to be signed for IBAN activation
 * Returns the standard message that users need to sign with their wallet to verify ownership for Monerium IBAN activation.
 */
export const getApiV1IbansSigningMessage = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1IbansSigningMessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1IbansSigningMessageResponses, GetApiV1IbansSigningMessageErrors, ThrowOnError>({
        url: '/api/v1/ibans/signing-message',
        ...options
    });
};

/**
 * Retrieves KYC integration specification.
 * Retrieve the specification to follow with the KYC integration.
 */
export const getApiV1KycIntegration = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1KycIntegrationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1KycIntegrationResponses, GetApiV1KycIntegrationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/kyc/integration',
        ...options
    });
};

/**
 * Retrieves KYC integration specification for SDK.
 * Retrieve the specification to follow with the KYC integration.
 */
export const getApiV1KycIntegrationSdk = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1KycIntegrationSdkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1KycIntegrationSdkResponses, GetApiV1KycIntegrationSdkErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/kyc/integration/sdk',
        ...options
    });
};

/**
 * Retrieve a reusable token from SumSub.
 */
export const postApiV1KycImportPartnerApplicant = <ThrowOnError extends boolean = false>(options: Options<PostApiV1KycImportPartnerApplicantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1KycImportPartnerApplicantResponses, PostApiV1KycImportPartnerApplicantErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/kyc/import-partner-applicant',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a card out of a card order
 * The last step in the card creation process.
 *
 * **Validation Requirements:**
 * - User must have completed KYC successfully
 * - User must have a verified phone number
 * - User must have name and address set
 * - User's country must be supported
 * - User must not have reached maximum active cards limit
 * - Safe account should be setup
 * - User must not have existing pending card orders
 * - For paid cards, a valid transaction hash is required
 *
 */
export const postApiV1OrderByOrderIdCreateCard = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OrderByOrderIdCreateCardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1OrderByOrderIdCreateCardResponses, PostApiV1OrderByOrderIdCreateCardErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/{orderId}/create-card',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Attach an on-chain transaction to a Card Order
 * This endpoint associates a provided on-chain transaction hash with an existing card order by its `orderId`.
 */
export const putApiV1OrderByOrderIdAttachTransaction = <ThrowOnError extends boolean = false>(options: Options<PutApiV1OrderByOrderIdAttachTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiV1OrderByOrderIdAttachTransactionResponses, PutApiV1OrderByOrderIdAttachTransactionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/{orderId}/attach-transaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Attach a coupon to a Card Order
 * This endpoint associates a provided coupon code with an existing card order by its `orderId`.
 */
export const postApiV1OrderByOrderIdAttachCoupon = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OrderByOrderIdAttachCouponData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1OrderByOrderIdAttachCouponResponses, PostApiV1OrderByOrderIdAttachCouponErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/{orderId}/attach-coupon',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve details of a Card Order
 * This endpoint retrieves details of a card order by its `orderId`.
 */
export const getApiV1OrderByOrderId = <ThrowOnError extends boolean = false>(options: Options<GetApiV1OrderByOrderIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1OrderByOrderIdResponses, GetApiV1OrderByOrderIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/{orderId}',
        ...options
    });
};

/**
 * Marks a Card Order as paid
 * This endpoint marks the Card Order with `orderId` as paid.
 */
export const putApiV1OrderByOrderIdConfirmPayment = <ThrowOnError extends boolean = false>(options: Options<PutApiV1OrderByOrderIdConfirmPaymentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiV1OrderByOrderIdConfirmPaymentResponses, PutApiV1OrderByOrderIdConfirmPaymentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/{orderId}/confirm-payment',
        ...options
    });
};

/**
 * Cancel a Card Order
 * This endpoint transitions the card order to the cancelled state.
 */
export const postApiV1OrderByOrderIdCancel = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OrderByOrderIdCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1OrderByOrderIdCancelResponses, PostApiV1OrderByOrderIdCancelErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/{orderId}/cancel',
        ...options
    });
};

/**
 * Create a new card order
 */
export const postApiV1OrderCreate = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OrderCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1OrderCreateResponses, PostApiV1OrderCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/order/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove an owner from the Safe
 * Removes an existing owner from the user's Safe account.
 *
 * The signature should be generated by signing the transaction data obtained from
 * the `/api/v1/owners/remove/transaction-data` endpoint.
 *
 * The operation is processed through a delay relay mechanism that executes after 3 minutes.
 *
 */
export const deleteApiV1Owners = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1OwnersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiV1OwnersResponses, DeleteApiV1OwnersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/owners',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of Safe owners
 * Returns the list of addresses that are owners of the user's Safe account.
 * These owners have the ability to sign transactions and manage the Safe.
 *
 */
export const getApiV1Owners = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1OwnersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1OwnersResponses, GetApiV1OwnersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/owners',
        ...options
    });
};

/**
 * Add a new owner to the Safe
 * Adds a new owner to the user's Safe account.
 *
 * The signature should be generated by signing the transaction data obtained from
 * the `/api/v1/owners/add/transaction-data` endpoint.
 *
 * The operation is processed through a delay relay mechanism that executes after 3 minutes.
 *
 */
export const postApiV1Owners = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OwnersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1OwnersResponses, PostApiV1OwnersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/owners',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get typed data for adding a new Safe owner
 * Returns the EIP-712 typed data that needs to be signed by the user's wallet to add a new owner to the Safe.
 * This endpoint is used as part of a three-step process:
 * 1. Call this endpoint to get the EIP-712 typed data
 * 2. Sign the typed data with the user's wallet using EIP-712 signature standard
 * 3. Submit the signature to the POST `/api/v1/owners` endpoint
 *
 */
export const getApiV1OwnersAddTransactionData = <ThrowOnError extends boolean = false>(options: Options<GetApiV1OwnersAddTransactionDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1OwnersAddTransactionDataResponses, GetApiV1OwnersAddTransactionDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/owners/add/transaction-data',
        ...options
    });
};

/**
 * Get typed data for removing a Safe owner
 * Returns the EIP-712 typed data that needs to be signed by the user's wallet to remove an owner from the Safe.
 * This endpoint is used as part of a three-step process:
 * 1. Call this endpoint to get the EIP-712 typed data
 * 2. Sign the typed data with the user's wallet using EIP-712 signature standard
 * 3. Submit the signature to the DELETE `/api/v1/owners` endpoint
 *
 */
export const getApiV1OwnersRemoveTransactionData = <ThrowOnError extends boolean = false>(options: Options<GetApiV1OwnersRemoveTransactionDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1OwnersRemoveTransactionDataResponses, GetApiV1OwnersRemoveTransactionDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/owners/remove/transaction-data',
        ...options
    });
};

/**
 * Retrieve user rewards information
 * Returns user's OG status, GNO balance of Safe, and calculated base cashback rate. Note that the cashbackRate returned does not include the +1% bonus for OG NFT holders - to get the total cashback rate, add 1% to the cashbackRate if isOg is true.
 */
export const getApiV1Rewards = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1RewardsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1RewardsResponses, GetApiV1RewardsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/rewards',
        ...options
    });
};

/**
 * Get or create user's referral code
 * Returns existing referral code or generates a new one if none exists.
 *
 * The referral code can be used in two formats:
 *
 * - For OG NFT holders: `https://gnosispay.com/oginvite?rcc=${referrerCode}&utm_source=referral&utm_campaign=${userId}`
 * - For non-OG NFT holders: `https://gnosispay.com/nonoginvite?rcc=${referrerCode}&utm_source=referral&utm_campaign=${userId}`
 *
 * [Learn more about how the referral program works](https://help.gnosispay.com/en/articles/9278537-gnosis-pay-referral-program-faq)
 *
 */
export const postApiV1UserReferrerCode = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UserReferrerCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiV1UserReferrerCodeResponses, PostApiV1UserReferrerCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/referrer-code',
        ...options
    });
};

/**
 * Get user's referral status
 * Returns the user's referral status, including pending and completed referrals.
 *
 * If the user holds an OG token, `isOgTokenHolder` will be `true`.
 *
 */
export const getApiV1UserReferrals = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UserReferralsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1UserReferralsResponses, GetApiV1UserReferralsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/referrals',
        ...options
    });
};

/**
 * Get terms and conditions status
 * Returns the status of all terms and conditions, including whether the user has accepted
 * the latest version, when they were accepted, and links to the terms documents.
 *
 */
export const getApiV1UserTerms = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UserTermsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1UserTermsResponses, GetApiV1UserTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/terms',
        ...options
    });
};

/**
 * Accept terms and conditions
 * Accept specific terms and conditions based on type and version.
 *
 */
export const postApiV1UserTerms = <ThrowOnError extends boolean = false>(options: Options<PostApiV1UserTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1UserTermsResponses, PostApiV1UserTermsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/terms',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the User profile
 * Get the User profile
 *
 */
export const getApiV1User = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1UserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1UserResponses, GetApiV1UserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user',
        ...options
    });
};